// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64, params LookupApplicationByIDParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64, params LookupAssetByIDParams) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransaction(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"include-all":           true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"round":       true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
		"limit":       true,
		"next":        true,
		"creator":     true,
		"name":        true,
		"unit":        true,
		"asset-id":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId, params)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"include-all":           true,
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransaction(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET("/v2/transactions/:txid", wrapper.LookupTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a28cN7bgXyF6LzD2bLfkJDMXiIHBhcceY4xxZgzLyQBrZXGpqtPdjKrICsmS1PH6",
	"vy94DsliVbH6IbUU50afbHXxcUieF8+Ln2aFqhslQVoze/5p1nDNa7Cg8S9eFKqVdiFK91cJptCisULJ",
	"2fPwjRmrhVzN5jPhfm24Xc/mM8lr6Nq4/vOZhp9boaGcPbe6hfnMFGuouRvYbhrX2o/0+fN8xstSgzHj",
	"Wf8lqw0TsqjaEpjVXBpeuE+GXQu7ZnYtDPOdmZBMSWBqyey615gtBVSlOQlA/9yC3iRQ+8mnQZzPbha8",
	"WinNZblYKl1zO3s+e+H7fd752c+w0KqC8RpfqvpCSAgrgrigeDjMKlbCEhutuWUOOrfO0NAqZoDrYs2W",
	"Su9YJgGRrhVkW8+ef5wZkCVoPLkCxBX+d6kBfoGF5XoFdvbjPHd2Swt6YUWdWdobf3IaTFtZw7AtrnEl",
	"rkAy1+uEfdcayy6Accnev37Jvvnmm28ZbaOF0iPc5Kq62dM1xVMouYXweZ9Dff/6Jc5/5he4byveNJUo",
	"uFt3lnxedN/Zm1dTi+kPkkFIIS2sQNPGGwN5Wn3hvmyZJnTcNUFr1wuHNtMH6ynesELJpVi1GkqHja0B",
	"ok3TgCyFXLFL2EweYZzm/ijwApZKw55YSo2Piqbp/L8qnhat1iCLzWKlgSPprLkcb8l7vxVmrdqqZGt+",
	"hevmNcoA35e5vnTOV7xq3RaJQqsX1UoZxv0OlrDkbWVZmJi1snI8y43m8ZAJwxqtrkQJ5dyx8eu1KNas",
	"4IaGwHbsWlSV2/7WQDm1zfnV7UDz2MnBdav9wAV9uZvRrWvHTsANEsKiqJSBhVU7ZFUQP1yWLJUuneAy",
	"h0ku9mENDCd3H0hq495Jh9BVtWEWz7Vk3DDOgpyaM7FkG9WyazycSlxif78at2s1c5uGh9MTqk4zmdq+",
	"0WZkNu9CqQq4xM3zWsqCV9UWfllVTFiojVdqHGvECcrISueshApwkZ04wF+N1WqDizfg2qnGQrlQrfVI",
	"sVaVG9DM8URoWPqcCJ9KFbwylluYVIjSlexYdCVqYcfL/Y7fiLqtmWzrC9DuwANvtYppsK2WU5PTiDsQ",
	"teY3C61aWe6hclimdMrSTQOFWAooWRxlCpZuml3wCHkYPJ0ilIATBpkEJ86yAxwJN5lDccTlvrCGryA5",
	"kxP2vect+NWqS5CRBbGLDX5qNFwJ1ZrYaQJGnHq7si+VhUWjYSluxkCe+e1w9E1tPAOsvfQtlLRcSCgd",
	"b0SglQXiFZMwJRMeqmJccAP/+acp+dp91XAJmyzLHCIALSfeadbuC/Xdvoo4ww6S3BMPl2qIf1txby+8",
	"w0YLIvqMDHVfPUvI3x97/fe4QaZzG7Fa0M8jlBKrD07sLEWFIuknh0lhG1rjWHB/I4KQMmIluW01PD+X",
	"f3R/sQU7s1yWXJful5p++q6trDgTK/dTRT+9VStRnInVxGZGWLPXMOxW0z9uvPy1y97E5eamCJ9zMzTc",
	"NbyEjQY3By+W+M/NEnedL/UvM7rQTM2cu3O8VeqybdKdLHp38IsNe/NqCrtwyG1cAynMNEoaQCvBCxKW",
	"7/1v7ifHGEAi30vk3elPRqE+143daNWAtgJSm4f7739oWM6ez/7XaWcjOaVu5tRP2KnQdorhE5pz6wmd",
	"CNyTPmjHwOqmtaS25WgoIv3HCNtwzu5Y1MVPUFjaoD4YT6Bu7OapA9jDbo63W/h/1GMO2DcPMteab+55",
	"H0kELlCUjUf+3qlbjv81fCUkLnzOrtcgWc0vHTvgUtk1aObOAowNwpAUSJKP0VjjJapXKk9mOYrJnKm5",
	"86F2p3aMc+3a7jzRpOmDUsOxtsscd78OoIX+zj3SA9JDupN3pQl3Dforr7gs4BinfOGH2vuEvxNSIBB/",
	"p6vY4zGHY45beYwjPgYBu3F2Eiw2eliRj1MeY5PMsXbpAAYX9usR5+NZ3hnj/1qp4vJWZ7ntqHDUHTP/",
	"HXhl1y/XcA/zJ2PvgOJDd4k4AkbfKyYm951d609WtUPR6Q97IPIk05gvffe+HDrubfn+7K93pkMmuP8Z",
	"m8MO+XO4N6cX44xP0PvvhSTrlbuTc8u4d3GR8edcnstXsBRSuO/Pz2XJLT+94EYU5rQ1oL1ydbJS7Dnz",
	"Q77ilp/L2XwoO6Z8+ujF8NA07UUlCnYJm9wpkHtlPML5+UderdT5+Y/MKsurxM6cOF28fbC7RI9RjiZY",
	"OMxQrV14Z+VCwzXXZQZ0E62TODJ5f7bNOmd+bDKiemeoHz9PBrxpzAKt9As00+eX3zSVW36qPZNpn7kj",
	"Y8YqHUykwgRo8Hz/qaw3O/JrRvjFWgOG/XfNm49C2h/Z4rx99uwbYC+a5q0b88zB8d/eZOjoadOQ2+TA",
	"W083WE5JwIXjeS7gxmq+aPgKTHb5FniDp78GZtoaPUpVxbBbz9vRaLXSvEaTt+kWEPZj+gAIjv1kWbJC",
	"XNwZ9Qou+vwS8BMeIbZha6i8sf0O55VcPW59XDuuL1uCAs7PP6K/P5xM9A+uuJAmSAUjVtIRgXelXgAr",
	"nBYA5Ql7s2TI1ea97j6gx3PMyDqEIe8n++DWiKZzVnCJXtGmRC+hkIzLzdAMacDaYPR9D5ew+ZBY3g8M",
	"O/BONr5DJJatGy6Kxe6E2TU3rFZokC5A2mrj/XYZ1MwD0wppyQVRkG904fB3imkg1STuWUc4KQvxYwwR",
	"MfFW8qZhq0pdeE4TUfR5xNHQZ5qpvHMAmCMwlOxdI2zDFtpruM5sBBHixBbcYqFuvDuR4dbl3RrllkIb",
	"9AkD9zKCpyRyC8zzDusxKP9eA2plSjOp7AClTCDpHNJHj9Z81nBtRSGa/ayTNPq7Xh83yC7RnhXmajmU",
	"2SORmhUh1HhxwU1efIP74jCwNRTM4NYYGF2YibRlXMEJw0BIT6oXFcY3xNgrOmOuMfAiLJtikaZAy9MF",
	"aNnpVAGM/o6kytuamxCDgaEqgUXspeZMIO8HtwGIwI5uEuxN9Vbh5q3gik/t/7Qz8I0sHe8A049Hia6+",
	"IFaG5D+PDmiKMQ0uweAHDM6/2fwgR9585nS8Nn8cSqKO56hrRQunxgFRPGh/MMkBOTj+tVxWQgJbMBFX",
	"a3G1FD+kCkFBNB0l+jnAXQH+yBy2uQH2HiGHxgnYjVIVDcz+qVLalKtDgJQgkJvwMDayleRv2MMmE4N9",
	"/eVi5yVgzDs6Ipp3fnE6xvHNLbrf3g3ZWPZ+1mvFqMmFv28k4iqHoo41Fe6CL02LMWRWFao6GV3MDFSA",
	"nH7R46wLdwnL6nSAaHgWuiWXNvZELJ2K9TRh5RpWwljQ/sKOEMbQgi5yYmPBQcatBe0m+r9P/uv5xxeL",
	"/8MXvzxbfPu/T3/89KfPT/84+vHrz3/5y//r//TN5788/a//yN0fr5SFBYq7xRWvcl7r8/OPrtFrg6r4",
	"a5SMWfbT2ypGQX5iwpCB017CZlGKqs2ftp/3H6/ctP+Mt1fTXlzCBoUM8GLNLrgt1iiFetO7NlumrvjO",
	"Bb+lBb/lR1vvfrjkmrqJtVJ2MMdvBKsG/GQbMWUQMIcc41Ob3NIt7AVvnq+gsnx78DnaFBzDtPxkm81m",
	"RExlGHub+pVAMc15aaTsWvpu6OlVCFnCDYY5CpvEdJrRivZVl9GWSNw0mcbdzvwI964Wp6tLVWM/Sl43",
	"9h/vsLzx8Psub4K98KYR5c3AOEUHlmcfeHqH3Pro+jhCMCQcP9gO5EoMUeNwMas0BGMaUUuijlDgs0zX",
	"NiajLvR2v4MJAtxHAqs2KlGDae4NAWEcI+zXnsNFttSqRsob34IS5BQT+n0PBTuRM5jVpzKN8cUxTwyx",
	"32mPB179AzY/uLZ4qq43BU0LuS/JdNcd7MmEtOoIR3M3y2IO8/2IOzD/XSS2LNZjzgtZd3qOggMJgDeN",
	"Vle8Wnj76xSj0OrKMwpsHsy1DyzT82f14W8v3r7z4KOlD7gmi/zWVWG75jezKifclJ6g05Ck4a5lwSw2",
	"FCLe/ipMz2Z7vQYfbp9cWpy49shFVN7Z4xOO4G24y6DcHWiR9a4DWuIWFwI00YPQmX7IgdB3GvArLqpg",
	"cwnQ5jkTLa5z2xzMnNIB7ux8SHxIi6OymxF156ljBydKZ9iSBlBTKolhyof7x8sS3pDQgIMIWvONwxvy",
	"fI1ZkmzrhSO6halEkbfKyQvjUEKSQ8k1Zth44q7lRnQMPT9WK5KxXDOzR/TPAMhkjuxmhhimqb27UN7j",
	"3UrxcwtMlCCt+6SRFgfk6agxJKLdWo/OmJ0pYe0BNWmc8BAd2idW3WlxcZTbaNJOOR5P6k/Nryee3V2U",
	"aDfUlPqMQGzXoFPf4AjcV9FYFbAoOjW57LlRDggxSGccaRlbwgM88XlW0UrhXay3OJ3dedZBW/cJeHl2",
	"MSlqX0yLWTf+AQK2k6cIWCpJKSeQV0ZlhmnlNZc2ZBb63fK9DZBl0fW6VtpYTEXNBs0cdN1IMxbvdMkw",
	"i6VWv0DeyLZ0eHA9nj6ZmHrnB9/7sjDgDBOXhngy04iyCxljzuddQYqXzDsDNdQOol29KzMQcD89rkkG",
	"M3VFST6yfiDOhBBDXpO4e/FGF1wUXBJzeYmFC3oO0DyLSiO0Tmn8jkV5mMeGAH59wYvL/E3BwfSiC3Lo",
	"OVOsYqFzzOvtn9cJS+IlYlthEMcb0LWwfZHXEepttf7fGjsqRM2rvPpf4u5/6CmUpVgJSlFuDSQpun4g",
	"1ighLWFRKUxT8Q2FkXRb82bJns0T/uZPoxRXwoiLCrDFV9TightUzDpbT+jilgfSrg02/3qP5utWlhpK",
	"u/a530axeDNDU0n0Xl6AvQaQ7Bm2++pb9gT9tkZcwVO3i17dnj3/6ltMa6Y/nuUEmi9msI39lsh/A/vP",
	"4zE6rmkMpyr4UfP8mMrRTHP6LdREXfehJWzphcNuWqq55CvIR0PVO2Civnia6PYZ7IssqXwCKpZM2Pz8",
	"YLnjT4s1N+u8LkRgsELVtbC1IyCrmFG1w6cu65UmDcNRLQbi9RGu8BGd5A3LG8Ie1sVHCaS5VWMowz95",
	"Df1tnTNumGkdzF12u2eI2Q3WYEBf5SfREwcc1Avflz2RSi5qRzvlU8/P+viXjUFWllf58MfAu4bRr9uH",
	"3lfHcKMsJje27W0sT3jSrbe41fl18tZN9f37t14w1EpD3y55EUJreyJGg9UCrrIUO4zDjppJFBdh53MK",
	"CqVNjGDFn1PIpq45Sl1eAjRCrk4vXB9SIWjUofKwAglGmGnCXq3d9rjPjhSTWykOzS6gUnJlHp4mA+AT",
	"DqIVIAa9ebUL6tHAoQjFAptOb4xr56Z4F4pW0NCu/cPvRhJwtTMh571vOx0f5ZgORdi+9PGw5L7vu1Jo",
	"vdccbZUgSxI3SIZrLuRE0BRAOREAAjjjmdJWkBMZ4FcI57CiBmN53eSZIhrviBKRqh2gsYvTkgwUSpaG",
	"GSELYNAos96VxjMRfn4jcbJKGGJ9aWHCQmkqVYASwKpBisW+AaBbk0n6MC60UnYKUBQVaRaQUpbx1q5B",
	"2hh2BVgfabgSChFFTYgUbmJZ7DvHhkORB15VmzkT9g80DgZ2oFyoQV9WwKwGYNdrZYBVwK+gK4aFo/3B",
	"sA83ojRY6qqCG1GolebNWhRM6RL0CXvtC5Wgdkad/HzPTpgPjvdhYx9uJC6vVECqW7pOWmaI84v25HTF",
	"c6ZktRn9jBWkDFRXYE7Yh2tFQJguocg4YdjrcdFaCqwtxXIJSKe4HFTqsF/3IYEJy3phcbE4rF/Tr0Bt",
	"N3KB2syEcmvpBnUjX1Ij5qNR+0b6AWnUpEkHhKqgXIGek6kHt13U0CWQOR1CadtdJJdAQZqOswlptSrb",
	"Aiht6ayHjwlYYgRSrHSU5AUgDoWqah2c4RIYeKq7KOCl6xndA6XqrxDPDq5Aswt3y+oGekJMJ4HLWK4x",
	"zhwwG4KWCuXTPHNum5XmJeznW0Im+D31iOk2YYQrddgAP7j2Q7Wpp5v0JH5eSieBkk7KpLw8x8smVa/3",
	"U9HLr6lYnIaKwkqxzhi2nY8UqyXAwgiZt8osAZC386KAxqFzWkcWwDEq0jORVWC+S5Ct7oSlFVdAAa9b",
	"lIFFwauirSiwa4ukvy54pfum7AqWVjkES8sLdqYK4ea6wMAyKvFF82nHAJMejqIcmm58C9LiQ0UtRxx6",
	"4H8dh5AvKriCvOIOnCLJ/66u3SV3E8/CTdGBMSd6QVKJkJOugs49Ou3v/QUjAZ+IyWPddiDdUUxsbpme",
	"cwNaqFIUTMifwFNzZEsBY6iwnpJWyBbrEWro4CY5wTAofhj4PsYAPZXa5z70o0IlXPdOu0z0uX4MpbH8",
	"EgjsEL7vReO+Z6rBiLKdMLFoXvQhOwwZPfG+5xZOdTxacyS8HHCoSOTbiG6IywO0GZzWeJcm+VSP+e7D",
	"rHgM2GaeUWfCynzOcGg5cfdRVgX7QMiZi2NfgTb9gKXElAI3O8Z2LXrjUya1Vg3GrR0+yyKEEpjJ+TbE",
	"jjucC8oXJb1gf/C+7MwOTqSZRwDMtbDFejERo+3aUgsHw/vhTWs8JakQSIWwXEJh94EBg32pQuUkFPTZ",
	"QfEKeInZGV3cNkVsD0F58k/F3NAm0WukEaiFdmoNjvL0gPJLEUN2If8Pak/cv1L4P3Td7EEGQZHxZ583",
	"UlEbjzxd0g9nGzC4K7EAYkIjjTK8yluew6QlVHyzbUps0J80KrbB+E4yhzsZ5gQK3EDRTsQRJlN7Ots2",
	"uWsyXHAkzzFVpEX9hif5N62VTktGDJxxkoFrwUJZPrrVKPwestBjVm3/AN23JMS8m7MGY/gK8mVDU1wM",
	"DXMo+LcrXk3Ewb+HRoNxmi7j7MPfXrz1zpGpaPhiMnmDW5+ZZTmbTJv8PMebWp63UawRfvcFo7OW0an4",
	"Igovcp9HvW/ntZ0qL5JsaAhXGwP0jxCSyxouvOevSwUY76xPDxkn7OwT1tsd8HARPukCB8mtJC06M8Zo",
	"tsbPlI4e8foA9C0vFjFYMFecdT5DkukXFBnfuweWHmEWtVhp5Jb5UafJJjEj7uDuPdgHk3YzhPFymzuq",
	"fZbZYSPqpiJ3k9cRnERPe7GDclK6CKD7Dyg7dqzKvUebwK0dQMcPMrktLLuzN7cHlPxLvlR1U8E0I2/I",
	"UUhF6klWY2YwL0vhZVkw7qiiaHVn9RuGjPzAK0HFgw1mB0ulGvevk4nS/QfTO1Rr6f/AtfsP1aro/4+w",
	"KkkldkPN8FyEnPmqE6q1IfB25pSEkq4ovm8u1fiWKWJ7mavHQiLDyraG/PaEM55MRUb2LozZUSV+WeGX",
	"NFqaESDotjbhL8NKsKBrpy2v1TWr22KNAcJ8BSFeGH3xaKodTNQbPYQV9ePevUfSNLyggShUo+J6BZr5",
	"6AnmSx/GEIyai0EJ86HbGC/PPCc4d0Uxjwvvo5qTxDJngqUDGJewOSUpjr/fgnFMh0RPAIaB0fcI0p3i",
	"q9MQ/R34etlTgKjwTC+rIYJ/REXIwedp7UBFaJx8sO/ycB1IDq2B8Tr3d2+le5thFd3a9tXix5s7rXzb",
	"i32U73wFCdcdtX/akFDVJXNveyjdndbpx/DzZk+9X55w+LILMiWDhbT80yuFqmsl0TxVVQPfoCwZxrYY",
	"fItFMpBXUKkGsq1xk/YIqzRiJaG0N5LiIs7wzw83Mtc2Fb/YOllerhxd8rbW7eo0DuoOUXgrvXt12xG7",
	"ANRuxPDk2u1HfE1RcnFEHGoJ+i5jfvBj7FECbCU1ZVZRmKh/6cK7PemEB0/5hUzLUBoshINGPy783PLK",
	"+6kleoU/YEhkcQmSqn7FF8esYiBNq71b2MGK4zlQ/DAqFbqma3Lb+l+LbTV1NJrMozXeB0VheC91depA",
	"6Q5Hba8p5NoLuVpsyXooMO3BNwxpbWjn2lreyQ3ukFDXUO6ZE5t6xTC1J/TfkvtApcm6B+7ySS/JAzBy",
	"nEHOnrx59ZRheYipRP3kZcjdy05rhe0HEUXdjmAZJjkdAsUSYMoVOYjeYEuYEDa7qpwsr7oCJ9hqaD7e",
	"CeWe4Wh/5wYrlvjm3m3+hcag9YD075OMh0qTMg+ugjGfrbRq8yFLK0oU/iu+IsRAFopeXLLAUBGiQBqz",
	"5n/+6uvTr//8n6wUKzD2hP0bMxlICxrXT+qfJhNdXaZeoTeGgMVMQFJnfLREMufaH+goKkb4qAkc5uFP",
	"OFtdIFkdPn857iWt5sTkFmq5zCZQ/gt/78woOvA+DePd3YP70Us7t5S+/6Bnej7PZzvK+lRXsaLP7Qi8",
	"gqlyddVNBk2/+XrRYeoJe+t6M5BLpd0ts26tk7X4iF6w86XYQxH3tivdicH28hfQCi/Rkil3Zx7KGpFs",
	"NkZi8AL1YOPDiRwMMVMyxh4/OUOtYU5APqU7Wuad4FZaQWqG28Yfkl1sHIN3QP97LaoMFjTKfTcpHHMm",
	"FaOi1GlLipvrMkcIZh+43EOkhyWnNFu8zNuIHCZgzMTbpFJHd0Mv1lx2VXb7ZT4oyIkcXUnlsgFOHvKi",
	"UJ/HDq+PUk1EV0hfgMrpyJjeEA0tD7vdDd/UIO0tmcI76k2BG/QI5nYlVE8ooaH3rnKWU4/bubHdx5he",
	"F7V9NKkRI0rWOJ9QvbsHTX3p3k59IuRyUmrZYvBfEi8ZTGr+VhFNs5ewYTqYCdJKeaS530LRJ4mRfz/4",
	"g6ihU41Jl8hJYbGXtPDPcGevVhT5TdzsD1uWE4fZjhVmAiuo73aciKdwANqexT79B+zGBpZNA30/dq9a",
	"Zz9wE6+ZJ+xVDKhFEzyFlnVRtv4N+IGhntLlYvai0Omrs2SKRFv++fnHhtz6GcL1DUjMuzZjge+b8GK5",
	"ijW/M7aD0OxmCbprl7u/h5ZL/UvXcGw6CM3G5eJ7nGd+jLcB8zTkj3mBE2SCtGb9u8ucihn1iuHFh+k7",
	"nOvQZ4eha2tFOR+Lgsb9RFj19JR9koET+yelBHc/vORV9eFG0kyZCIPuOb2ca4qKNPosg8g1HWv13qlg",
	"zPAUmxrSeVE4jaTsohgTOP9g2LCKi380eFTHpSeYD+SamRL/Ef+4Xk2uG+0YY61JFIzrVVuT7ff+17dj",
	"BZMF8ETpE5zGVdy8JpQ8l6+0T20QS5+3MlVBYs+qWvQ0Aj5B2mlcXWDlBKbPna4Ojc9vVnJRRMepk134",
	"frZi5+RwPJ+dsDcUBq2Bl8REtbCQq+/UWz/mBl5DVaHZmDB6EU83KQF34qioVz/LIGZrwBcQhg7Y33DF",
	"MN6YduLEpriSD7bqHdKvcEIv3Ux+pHhIBZdS2d/QOR1YMWzwBkwSJtA0sXRYBTI8RUS6MA47YbpTGsRK",
	"bnu3YcmDIDDD48qKgz6X8ulX6cGbkZSIKvLtmCga5GkwKs/Oy4WS1SbHXdNUuwF7jXux9fGGmHxnutAS",
	"41eZ1J/Yb4mBzbxLVoiIjTfMd8dd3y0KvN25qttggB7X2NW3Fz+z5elOyvzpD71LM0ucX1s1MyqGULmF",
	"E3/SsAjyM3AsWVKdhLYLxzmXL9gvoJW/QMahHEF0JlOfN+7zRU8ynWJREzPqNpzywKIxtPgt2uFk4anz",
	"8483fKRlIEx30C9uV0Ns5xm/nijakZ5x8KD4Kh13rMZDM27Z2Kmnyc7PPy55WQ6qOqQhOsRkYu0V2m1f",
	"vQSRhV9PFArZeprLrae5ZfxeUsF1uAFueVQi3BgpfeM67Dj1yIUtTofgdfWdxlPvQ/zRp7wXaoRb8F2R",
	"I8y6BT221JXjNd7JXsSSoR44FeE7YZ6FeP9r+F0H20q1DNwsuGyCU3Hwqgc948pq3hy1at1O5pFAPO2K",
	"hklHdJeq4wVzGC+pQoADdB7v4dshd3uOKIyeP0H8OkzQ4GkVke5lMg01Zhd1V8zM4fiSS1Et7GphkXMf",
	"ffFpCLFJZkj3mrE3bmReXfONCbbTDrGmhwu7SrVMMna7NP2QDL75vdEFOpHeQyEagY+t9blgxPFpi+PE",
	"Y3dkuXRMh/KixFU0WvgYYt4VMes7ioKfyJdj4omAnvtt5lXfWkADB+uwa/MyjB1WFI80kWd7PB+TKW4X",
	"t3QHz/OevK3MzpsOD+Vx1IuYHE0zzd3k8K2KCT+JdI3coX3H9WVPBnLTf2iKguV7o/ZUjCTE/RZvz3jv",
	"wrvueRAM2Y22/h9Ak7PvPZelqtnrVhIWPPnh/eun/gHagGQhId8hn4fkC36WZjl+libzOIvbkmM9SHNZ",
	"/koP0lSjB2luv9L9n6IJuDX1EE0IDid/0koYqzMm4od/gWYbmwm+we18xrsxDmU0vhtxGj/T7RQp0qMm",
	"Hu61sWbRQETeSR3pPWPHLb1JbXw9vE4t6YfkdZUpZYysSyzuO0P2+uNNPBngNRKcBAuoZd5EM/5VvcCF",
	"k/dT6dkQqqhZJWrCspWlGWxhV8V+i/Nwq5bglYTQZqsfckp87iszz1IvYx8S9OL54Pr4et/woQqsckj1",
	"DPEFRXq8b1gKqNtK/2x4Jmm1UitRGLJVHOrufBv6fp7P6ray4pbjfBf6kv81LzEFehjPLJcl1yWD8us/",
	"//mrb7vlfmHsarxJ2bgTvyxvjuNWFH2NL65uDyYWjvJkpcYsa9IrpVedkT56oeZYl7WLijrMmYSA5Neb",
	"LDZEN1xsGE9QXTkFt7Ki+2nufltzs+5YZ/8ZZS458/xqGM2FeRS/zkMlCVEs7hRVMCCPKcbREcmXQBsp",
	"eyR82JclfpdwknHpWb9EMlA6fAnJZbjXTQVOt+t44JhuCr1prDoNR0MiP8x5Jsbl+NPx8ruODbBmpXKa",
	"COWKO2Wy07jwKt1BdYtqeaP9OUvhypXSW2swDqJ8KMpan5//mFc2KYU5r13mO30+8GzPBnva33Hat0kN",
	"t7kkIB6WlnfgwMODNN7zzxgIvERtrFDS8gL1Rip5O3vhTUszX5h2tra2Mc9PT6+vr0+C3emkUPXpCpMG",
	"Fla1xfo0DEQviqSptb6Lr3bnuHC1saIw7MW7N6gzCVsBvU0MN2jfipg1+/rkGWVkg+SNmD2ffXPy7OQr",
	"2rE1IsEplS2YPf/0eT47vfr6NA0qWWUfiAGuizVdBHzbE8wuBrrdvCljo9dKvwjDeQcBvbP4/OPUYxiO",
	"ZN3fP7egN7NQoTk1mHRuqzF57M4bpQu9oehF22qKHM3MWIla2AOn64oa8RUks52w7w0klQPVJQbgk7IY",
	"woxD4bvYaQIwN0QOrg5hxymPtGavqGJoG5fBwrzClBN0DsgkZvKkV5XLmyR9eXVfwqDYsFZWTjsIZnb0",
	"jpm4NCzYRtn9Bfc74HNdQsCmf7c9t9AwycJDuHAQHngibyigFG82KAqSh8bDxcdj6DyWY0j94/PuaR5v",
	"kJ6zWOBgYEmde/92eL5x/Coiec+nFuyjXxe8qnLLTHwqh51w5R9k+EKP101xp7MNkW2J29K/woDrNeFF",
	"+UvYTAHTJSVOU9bOeLXtn6fADxwpeIu7mvpUrA5L2DagcUhZoMHaIGYGGxdx1RCwUArDLyrAUmN4ge15",
	"uyeRL1bYPOAE0rIP06x76OffMsOPWDAfK+egAPr62bMgZb1RKhnt9CdD6lM34HR85CHJATk1L9Qv25rg",
	"GEvPkl+BzhXtRG6y1k77Xm/sAqXCeOTvjY/mavhKSB+xgKaeml+iRUdSmogPGArUGfJZnaiJ1m4vnDzG",
	"7GFx6aR3fwN+zGpFfcifYODAU1KhuLsYf5wZ1AtmP34eaBunn0KsmCg/T6oeb5W6bJvkxfquYv5IA6G2",
	"/kT/ukH03KqBRMtYoHZEZqcoJbgcgZylG2V1CwdJ5H1p/4i0+j9TEt4LwziATdwjW8iT4tEosUL62EGJ",
	"p8Ni9vuQ5dC7sYUu09Lyu+jzUZcfpJO7WZbixuNWcFcXalAeSGK5ylBLMQsFur1wsIPVHzJgTmk/8eun",
	"7MQhCyOd9AipJLltE6sPm8btQ4XBnT+53Qr403Zumch/Q7JQtEdgIo8RK7aI1nH3S00/ocXlTKzcTxX9",
	"hLZesnTl1m7EanrxBrvV9I8bb69FejpMFtI3c19sfJJ6/izyytkXKcTClNwypZOa0d3UtfBVmqemjw2O",
	"AgIV2B3CwG92wBAaHKp334uxZLiyZE30BIkVtbs3ekbDJXv/+iX75ptvvvUvfTmNgdBlasE0JCVCpsBF",
	"hlFyGz/vw37ev36JAJxFA+JerXYeasSoY60cR/zyFv47Ng39Lm0mv+Ylh1btVXuvC1Nm+Hb1JOaPP+BN",
	"4Hdy3R+/VnX316UmCr8HOdeb8GiXl+SeupfjIm0/7bvot9ruvzi2Kez3asr+XV7zjmzGGFDDfrbPfn3C",
	"R/vnIEftHm2gySSnn/o8YrcttF89NWtr6Zrk7aA5HWDIqXbqAY+mx2PR7IGU+nAmyHsyPMZk3Z1SG1tu",
	"CzagoXaI6kdB+juyl75Ggx/Z+0Kmd5AGdLePeU9dGHL26hWfej7q7G70ydXygbXgCPO1kl6Cz83nvh02",
	"31EMUUdmpJGd7Kf2uOaPCk9UeAIHvSdVB4c//RQQY7d643Nbdzt6XcP91Zs0/+5RsblXxcb4Kql7UeED",
	"+lNxyjsh+nz2p2d/Omhrtr6B0nsy7U7KVEJgp/79kJ3eW6w8OqwVdr1WiH/pS0ZbCTBM9qiCPapgv6Kf",
	"8NGt8T/drXE0oX5caZdy2730z9G7d4+qaHiXppMl92l4SGXlIdFOvYJ6aamZrRrqY8DTY8DTY8DTY8DT",
	"Y8DTY2jSY2jSY2jSY2hS926OrDZddNCoXHFadcQBmtTiSFm+L9Q/heqx/OADJXm9VPWFkNBpwWEFXdqW",
	"Vf754P4rBaEhFv0LLrAd61poVU3I11AEP5ZOmc9CvX+unZ67j7ztrSYAiIVjkvnTGroHrQ3ru6GZhoWQ",
	"MMJl6fa5qjbM+tfRuFMGw0rmTCzZRrXsGomlEpfYH98Oojizmqpb97PlsDReO+l78d0XsRrgLsvP/VuZ",
	"H+PoHuPo7jmODl+fMaef6L0aunju9NHEN/pyt96/uo+7brqEBjRdPiY1Behh7Tvbzo8Wd8u93svYkEQ/",
	"bE+rijEQjxaGRwvDo4Xh0cLwaGF4TKl6tFs82i0e7RaPdotHu8Wj3WK/iJWHtTX81goKPVozvjxrxnz2",
	"5yPe6G8VhDeMcu2VC/7kbgG741yZuzBVo7dLciaVD72nV3cHu/pryP6ZvL8horndA9iHoONvIyT0C6CC",
	"zr6FL3Xoq4CS/TKocMPrpgKsgDpzqOb7xwKqhapr5CDxFz9y8ounuM8/fv7/AQAA//+NoaTpk/gAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
