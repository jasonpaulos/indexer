type Query {
  """
  Lookup block.
  
  Equivalent to GET /v2/blocks/{round-number}
  """
  block(
    """Round number"""
    roundNumber: Int!
  ): Block

  """
  Returns 200 if healthy.
  
  Equivalent to GET /health
  """
  healthCheck: HealthCheck

  """
  Lookup account information.
  
  Equivalent to GET /v2/accounts/{account-id}
  """
  v2Account(
    """account string"""
    accountId: String!

    """
    Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
    """
    includeAll: Boolean

    """Include results for the specified round."""
    round: Int
  ): V2Account

  """
  Lookup account transactions.
  
  Equivalent to GET /v2/accounts/{account-id}/transactions
  """
  v2AccountTransactions(
    """account string"""
    accountId: String!

    """
    Include results after the given time. Must be an RFC 3339 formatted string.
    """
    afterTime: String

    """Asset ID"""
    assetId: Int

    """
    Include results before the given time. Must be an RFC 3339 formatted string.
    """
    beforeTime: String

    """
    Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
    """
    currencyGreaterThan: Int

    """
    Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
    """
    currencyLessThan: Int

    """Maximum number of results to return."""
    limit: Int

    """Include results at or before the specified max-round."""
    maxRound: Int

    """Include results at or after the specified min-round."""
    minRound: Int

    """
    The next page of results. Use the next token provided by the previous results.
    """
    next: String

    """Specifies a prefix which must be contained in the note field."""
    notePrefix: String

    """Include results which include the rekey-to field."""
    rekeyTo: Boolean

    """Include results for the specified round."""
    round: Int

    """
    SigType filters just results using the specified type of signature:
    * sig - Standard
    * msig - MultiSig
    * lsig - LogicSig
    """
    sigType: SigType2
    txType: TxType2

    """Lookup the specific transaction by ID."""
    txid: String
  ): V2AccountTransactions

  """
  Search for accounts.
  
  Equivalent to GET /v2/accounts
  """
  v2Accounts(
    """Application ID"""
    applicationId: Int

    """Asset ID"""
    assetId: Int

    """Include accounts configured to use this spending key."""
    authAddr: String

    """
    Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
    """
    currencyGreaterThan: Int

    """
    Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
    """
    currencyLessThan: Int

    """
    Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
    """
    includeAll: Boolean

    """Maximum number of results to return."""
    limit: Int

    """
    The next page of results. Use the next token provided by the previous results.
    """
    next: String

    """
    Include results for the specified round. For performance reasons, this parameter may be disabled on some configurations.
    """
    round: Int
  ): V2Accounts

  """
  Lookup application.
  
  Equivalent to GET /v2/applications/{application-id}
  """
  v2Application(
    applicationId: Int!

    """
    Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
    """
    includeAll: Boolean
  ): V2Application

  """
  Search for applications
  
  Equivalent to GET /v2/applications
  """
  v2Applications(
    """Application ID"""
    applicationId: Int

    """
    Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
    """
    includeAll: Boolean

    """Maximum number of results to return."""
    limit: Int

    """
    The next page of results. Use the next token provided by the previous results.
    """
    next: String
  ): V2Applications

  """
  Lookup asset information.
  
  Equivalent to GET /v2/assets/{asset-id}
  """
  v2Asset(
    assetId: Int!

    """
    Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
    """
    includeAll: Boolean
  ): V2Asset

  """
  Lookup the list of accounts who hold this asset 
  
  Equivalent to GET /v2/assets/{asset-id}/balances
  """
  v2AssetBalances(
    assetId: Int!

    """
    Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
    """
    currencyGreaterThan: Int

    """
    Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
    """
    currencyLessThan: Int

    """
    Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
    """
    includeAll: Boolean

    """Maximum number of results to return."""
    limit: Int

    """
    The next page of results. Use the next token provided by the previous results.
    """
    next: String

    """Include results for the specified round."""
    round: Int
  ): V2AssetBalances

  """
  Lookup transactions for an asset.
  
  Equivalent to GET /v2/assets/{asset-id}/transactions
  """
  v2AssetTransactions(
    """
    Only include transactions with this address in one of the transaction fields.
    """
    address: String

    """
    Combine with the address parameter to define what type of address to search for.
    """
    addressRole: AddressRole

    """
    Include results after the given time. Must be an RFC 3339 formatted string.
    """
    afterTime: String
    assetId: Int!

    """
    Include results before the given time. Must be an RFC 3339 formatted string.
    """
    beforeTime: String

    """
    Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
    """
    currencyGreaterThan: Int

    """
    Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
    """
    currencyLessThan: Int

    """
    Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true.
    """
    excludeCloseTo: Boolean

    """Maximum number of results to return."""
    limit: Int

    """Include results at or before the specified max-round."""
    maxRound: Int

    """Include results at or after the specified min-round."""
    minRound: Int

    """
    The next page of results. Use the next token provided by the previous results.
    """
    next: String

    """Specifies a prefix which must be contained in the note field."""
    notePrefix: String

    """Include results which include the rekey-to field."""
    rekeyTo: Boolean

    """Include results for the specified round."""
    round: Int

    """
    SigType filters just results using the specified type of signature:
    * sig - Standard
    * msig - MultiSig
    * lsig - LogicSig
    """
    sigType: SigType2
    txType: TxType2

    """Lookup the specific transaction by ID."""
    txid: String
  ): V2AssetTransactions

  """
  Search for assets.
  
  Equivalent to GET /v2/assets
  """
  v2Assets(
    """Asset ID"""
    assetId: Int

    """Filter just assets with the given creator address."""
    creator: String

    """
    Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
    """
    includeAll: Boolean

    """Maximum number of results to return."""
    limit: Int

    """Filter just assets with the given name."""
    name: String

    """
    The next page of results. Use the next token provided by the previous results.
    """
    next: String

    """Filter just assets with the given unit."""
    unit: String
  ): V2Assets

  """
  Lookup a single transaction.
  
  Equivalent to GET /v2/transactions/{txid}
  """
  v2Transaction(txid: String!): V2Transaction

  """
  Search for transactions.
  
  Equivalent to GET /v2/transactions
  """
  v2Transactions(
    """
    Only include transactions with this address in one of the transaction fields.
    """
    address: String

    """
    Combine with the address parameter to define what type of address to search for.
    """
    addressRole: AddressRole

    """
    Include results after the given time. Must be an RFC 3339 formatted string.
    """
    afterTime: String

    """Application ID"""
    applicationId: Int

    """Asset ID"""
    assetId: Int

    """
    Include results before the given time. Must be an RFC 3339 formatted string.
    """
    beforeTime: String

    """
    Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
    """
    currencyGreaterThan: Int

    """
    Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
    """
    currencyLessThan: Int

    """
    Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true.
    """
    excludeCloseTo: Boolean

    """Maximum number of results to return."""
    limit: Int

    """Include results at or before the specified max-round."""
    maxRound: Int

    """Include results at or after the specified min-round."""
    minRound: Int

    """
    The next page of results. Use the next token provided by the previous results.
    """
    next: String

    """Specifies a prefix which must be contained in the note field."""
    notePrefix: String

    """Include results which include the rekey-to field."""
    rekeyTo: Boolean

    """Include results for the specified round."""
    round: Int

    """
    SigType filters just results using the specified type of signature:
    * sig - Standard
    * msig - MultiSig
    * lsig - LogicSig
    """
    sigType: SigType2
    txType: TxType2

    """Lookup the specific transaction by ID."""
    txid: String
  ): V2Transactions
}

"""
Block information.

Definition:
data/bookkeeping/block.go : Block
"""
type Block {
  """\[gh\] hash to which this block belongs."""
  genesisHash: String!

  """\[gen\] ID to which this block belongs."""
  genesisId: String!

  """\[prev\] Previous block hash."""
  previousBlockHash: String!

  """Fields relating to rewards,"""
  rewards: BlockRewards

  """\[rnd\] Current round on which this block was appended to the chain."""
  round: Int!

  """\[seed\] Sortition seed."""
  seed: String!

  """\[ts\] Block creation timestamp in seconds since eposh"""
  timestamp: Int!

  """\[txns\] list of transactions corresponding to a given round."""
  transactions: [Transaction]

  """
  \[txn\] TransactionsRoot authenticates the set of transactions appearing in the block. More specifically, it's the root of a merkle tree whose leaves are the block's Txids, in lexicographic order. For the empty block, it's 0. Note that the TxnRoot does not authenticate the signatures on the transactions, only the transactions themselves. Two blocks with the same transactions but in a different order and with different signatures will have the same TxnRoot.
  """
  transactionsRoot: String!

  """
  \[tc\] TxnCounter counts the number of transactions committed in the ledger, from the time at which support for this feature was introduced.
  
  Specifically, TxnCounter is the number of the next transaction that will be committed after this block.  It is 0 when no transactions have ever been committed (since TxnCounter started being supported).
  """
  txnCounter: Int

  """Fields relating to a protocol upgrade."""
  upgradeState: BlockUpgradeState

  """Fields relating to voting for a protocol upgrade."""
  upgradeVote: BlockUpgradeVote
}

"""Fields relating to rewards,"""
type BlockRewards {
  """
  \[fees\] accepts transaction fees, it can only spend to the incentive pool.
  """
  feeSink: String!

  """
  \[rwcalr\] number of leftover MicroAlgos after the distribution of rewards-rate MicroAlgos for every reward unit in the next round.
  """
  rewardsCalculationRound: Int!

  """
  \[earn\] How many rewards, in MicroAlgos, have been distributed to each RewardUnit of MicroAlgos since genesis.
  """
  rewardsLevel: Int!

  """
  \[rwd\] accepts periodic injections from the fee-sink and continually redistributes them as rewards.
  """
  rewardsPool: String!

  """
  \[rate\] Number of new MicroAlgos added to the participation stake from rewards at the next round.
  """
  rewardsRate: Int!

  """
  \[frac\] Number of leftover MicroAlgos after the distribution of RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.
  """
  rewardsResidue: Int!
}

"""
Contains all fields common to all transactions and serves as an envelope to all transactions type.

Definition:
data/transactions/signedtxn.go : SignedTxn
data/transactions/transaction.go : Transaction

"""
type Transaction {
  """
  Fields for application transactions.
  
  Definition:
  data/transactions/application.go : ApplicationCallTxnFields
  """
  applicationTransaction: TransactionApplication

  """
  Fields for asset allocation, re-configuration, and destruction.
  
  
  A zero value for asset-id indicates asset creation.
  A zero value for the params indicates asset destruction.
  
  Definition:
  data/transactions/asset.go : AssetConfigTxnFields
  """
  assetConfigTransaction: TransactionAssetConfig

  """
  Fields for an asset freeze transaction.
  
  Definition:
  data/transactions/asset.go : AssetFreezeTxnFields
  """
  assetFreezeTransaction: TransactionAssetFreeze

  """
  Fields for an asset transfer transaction.
  
  Definition:
  data/transactions/asset.go : AssetTransferTxnFields
  """
  assetTransferTransaction: TransactionAssetTransfer

  """
  \[sgnr\] this is included with signed transactions when the signing address does not equal the sender. The backend can use this to ensure that auth addr is equal to the accounts auth addr.
  """
  authAddr: String

  """\[rc\] rewards applied to close-remainder-to account."""
  closeRewards: Int

  """\[ca\] closing amount for transaction."""
  closingAmount: Int

  """Round when the transaction was confirmed."""
  confirmedRound: Int

  """
  Specifies an application index (ID) if an application was created with this transaction.
  """
  createdApplicationIndex: Int

  """
  Specifies an asset index (ID) if an asset was created with this transaction.
  """
  createdAssetIndex: Int

  """\[fee\] Transaction fee."""
  fee: Int!

  """\[fv\] First valid round for this transaction."""
  firstValid: Int!

  """\[gh\] Hash of genesis block."""
  genesisHash: String

  """\[gen\] genesis block ID."""
  genesisId: String

  """Application state delta."""
  globalStateDelta: [EvalDeltaKeyValue]

  """
  \[grp\] Base64 encoded byte array of a sha512/256 digest. When present indicates that this transaction is part of a transaction group and the value is the sha512/256 hash of the transactions in that group.
  """
  group: String

  """Transaction ID"""
  id: String!

  """Offset into the round where this transaction was confirmed."""
  intraRoundOffset: Int

  """
  Fields for a keyreg transaction.
  
  Definition:
  data/transactions/keyreg.go : KeyregTxnFields
  """
  keyregTransaction: TransactionKeyreg

  """\[lv\] Last valid round for this transaction."""
  lastValid: Int!

  """
  \[lx\] Base64 encoded 32-byte array. Lease enforces mutual exclusion of transactions.  If this field is nonzero, then once the transaction is confirmed, it acquires the lease identified by the (Sender, Lease) pair of the transaction until the LastValid round passes.  While this transaction possesses the lease, no other transaction specifying this lease can be confirmed.
  """
  lease: String

  """
  \[ld\] Local state key/value changes for the application being executed by this transaction.
  """
  localStateDelta: [AccountStateDelta]

  """\[note\] Free form data."""
  note: String

  """
  Fields for a payment transaction.
  
  Definition:
  data/transactions/payment.go : PaymentTxnFields
  """
  paymentTransaction: TransactionPayment

  """\[rr\] rewards applied to receiver account."""
  receiverRewards: Int

  """
  \[rekey\] when included in a valid transaction, the accounts auth addr will be updated with this value and future signatures must be signed with the key represented by this address.
  """
  rekeyTo: String

  """Time when the block this transaction is in was confirmed."""
  roundTime: Int

  """\[snd\] Sender's address."""
  sender: String!

  """\[rs\] rewards applied to sender account."""
  senderRewards: Int

  """
  Validation signature associated with some data. Only one of the signatures should be provided.
  """
  signature: TransactionSignature!

  """
  \[type\] Indicates what type of transaction this is. Different types have different fields.
  
  Valid types, and where their fields are stored:
  * \[pay\] payment-transaction
  * \[keyreg\] keyreg-transaction
  * \[acfg\] asset-config-transaction
  * \[axfer\] asset-transfer-transaction
  * \[afrz\] asset-freeze-transaction
  * \[appl\] application-transaction
  """
  txType: TxType!
}

"""
Fields for application transactions.

Definition:
data/transactions/application.go : ApplicationCallTxnFields
"""
type TransactionApplication {
  """
  \[apat\] List of accounts in addition to the sender that may be accessed from the application's approval-program and clear-state-program.
  """
  accounts: [String]

  """
  \[apaa\] transaction specific arguments accessed from the application's approval-program and clear-state-program.
  """
  applicationArgs: [String]

  """\[apid\] ID of the application being configured or empty if creating."""
  applicationId: Int!

  """
  \[apap\] Logic executed for every application transaction, except when on-completion is set to "clear". It can read and write global state for the application, as well as account-specific local state. Approval programs may reject the transaction.
  """
  approvalProgram: String

  """
  \[apsu\] Logic executed for application transactions with on-completion set to "clear". It can read and write global state for the application, as well as account-specific local state. Clear state programs cannot reject the transaction.
  """
  clearStateProgram: String

  """\[epp\] specifies the additional app program len requested in pages."""
  extraProgramPages: Int

  """
  \[apfa\] Lists the applications in addition to the application-id whose global states may be accessed by this application's approval-program and clear-state-program. The access is read-only.
  """
  foreignApps: [Int]

  """
  \[apas\] lists the assets whose parameters may be accessed by this application's ApprovalProgram and ClearStateProgram. The access is read-only.
  """
  foreignAssets: [Int]

  """
  Represents a \[apls\] local-state or \[apgs\] global-state schema. These schemas determine how much storage may be used in a local-state or global-state for an application. The more space used, the larger minimum balance must be maintained in the account holding the data.
  """
  globalStateSchema: StateSchema

  """
  Represents a \[apls\] local-state or \[apgs\] global-state schema. These schemas determine how much storage may be used in a local-state or global-state for an application. The more space used, the larger minimum balance must be maintained in the account holding the data.
  """
  localStateSchema: StateSchema

  """
  \[apan\] defines the what additional actions occur with the transaction.
  
  Valid types:
  * noop
  * optin
  * closeout
  * clear
  * update
  * update
  * delete
  """
  onCompletion: OnCompletion!
}

"""
Represents a \[apls\] local-state or \[apgs\] global-state schema. These schemas determine how much storage may be used in a local-state or global-state for an application. The more space used, the larger minimum balance must be maintained in the account holding the data.
"""
type StateSchema {
  """
  Maximum number of TEAL byte slices that may be stored in the key/value store.
  """
  numByteSlice: Int!

  """
  Maximum number of TEAL uints that may be stored in the key/value store.
  """
  numUint: Int!
}

enum OnCompletion {
  NOOP
  OPTIN
  CLOSEOUT
  CLEAR
  UPDATE
  DELETE
}

"""
Fields for asset allocation, re-configuration, and destruction.


A zero value for asset-id indicates asset creation.
A zero value for the params indicates asset destruction.

Definition:
data/transactions/asset.go : AssetConfigTxnFields
"""
type TransactionAssetConfig {
  """\[xaid\] ID of the asset being configured or empty if creating."""
  assetId: Int

  """
  AssetParams specifies the parameters for an asset.
  
  \[apar\] when part of an AssetConfig transaction.
  
  Definition:
  data/transactions/asset.go : AssetParams
  """
  params: AssetParams
}

"""
AssetParams specifies the parameters for an asset.

\[apar\] when part of an AssetConfig transaction.

Definition:
data/transactions/asset.go : AssetParams
"""
type AssetParams {
  """
  \[c\] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted.
  """
  clawback: String

  """
  The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case.
  """
  creator: String!

  """
  \[dc\] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).
  """
  decimals: Int!

  """\[df\] Whether holdings of this asset are frozen by default."""
  defaultFrozen: Boolean

  """
  \[f\] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted.
  """
  freeze: String

  """
  \[m\] Address of account used to manage the keys of this asset and to destroy it.
  """
  manager: String

  """
  \[am\] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.
  """
  metadataHash: String

  """\[an\] Name of this asset, as supplied by the creator."""
  name: String

  """
  \[r\] Address of account holding reserve (non-minted) units of this asset.
  """
  reserve: String

  """\[t\] The total number of units of this asset."""
  total: Int!

  """\[un\] Name of a unit of this asset, as supplied by the creator."""
  unitName: String

  """\[au\] URL where more information about the asset can be retrieved."""
  url: String
}

"""
Fields for an asset freeze transaction.

Definition:
data/transactions/asset.go : AssetFreezeTxnFields
"""
type TransactionAssetFreeze {
  """\[fadd\] Address of the account whose asset is being frozen or thawed."""
  address: String!

  """\[faid\] ID of the asset being frozen or thawed."""
  assetId: Int!

  """\[afrz\] The new freeze status."""
  newFreezeStatus: Boolean!
}

"""
Fields for an asset transfer transaction.

Definition:
data/transactions/asset.go : AssetTransferTxnFields
"""
type TransactionAssetTransfer {
  """
  \[aamt\] Amount of asset to transfer. A zero amount transferred to self allocates that asset in the account's Assets map.
  """
  amount: Int!

  """\[xaid\] ID of the asset being transferred."""
  assetId: Int!

  """
  Number of assets transfered to the close-to account as part of the transaction.
  """
  closeAmount: Int

  """
  \[aclose\] Indicates that the asset should be removed from the account's Assets map, and specifies where the remaining asset holdings should be transferred.  It's always valid to transfer remaining asset holdings to the creator account.
  """
  closeTo: String

  """\[arcv\] Recipient address of the transfer."""
  receiver: String!

  """
  \[asnd\] The effective sender during a clawback transactions. If this is not a zero value, the real transaction sender must be the Clawback address from the AssetParams.
  """
  sender: String
}

"""Key-value pairs for StateDelta."""
type EvalDeltaKeyValue {
  key: String!

  """Represents a TEAL value delta."""
  value: EvalDelta!
}

"""Represents a TEAL value delta."""
type EvalDelta {
  """\[at\] delta action."""
  action: Int!

  """\[bs\] bytes value."""
  bytes: String

  """\[ui\] uint value."""
  uint: Int
}

"""
Fields for a keyreg transaction.

Definition:
data/transactions/keyreg.go : KeyregTxnFields
"""
type TransactionKeyreg {
  """\[nonpart\] Mark the account as participating or non-participating."""
  nonParticipation: Boolean

  """
  \[selkey\] Public key used with the Verified Random Function (VRF) result during committee selection.
  """
  selectionParticipationKey: String

  """\[votefst\] First round this participation key is valid."""
  voteFirstValid: Int

  """\[votekd\] Number of subkeys in each batch of participation keys."""
  voteKeyDilution: Int

  """\[votelst\] Last round this participation key is valid."""
  voteLastValid: Int

  """
  \[votekey\] Participation public key used in key registration transactions.
  """
  voteParticipationKey: String
}

"""Application state delta."""
type AccountStateDelta {
  address: String!

  """Application state delta."""
  delta: [EvalDeltaKeyValue]!
}

"""
Fields for a payment transaction.

Definition:
data/transactions/payment.go : PaymentTxnFields
"""
type TransactionPayment {
  """\[amt\] number of MicroAlgos intended to be transferred."""
  amount: Int!

  """
  Number of MicroAlgos that were sent to the close-remainder-to address when closing the sender account.
  """
  closeAmount: Int

  """
  \[close\] when set, indicates that the sending account should be closed and all remaining funds be transferred to this address.
  """
  closeRemainderTo: String

  """\[rcv\] receiver's address."""
  receiver: String!
}

"""
Validation signature associated with some data. Only one of the signatures should be provided.
"""
type TransactionSignature {
  """
  \[lsig\] Programatic transaction signature.
  
  Definition:
  data/transactions/logicsig.go
  """
  logicsig: TransactionSignatureLogicsig

  """
  \[msig\] structure holding multiple subsignatures.
  
  Definition:
  crypto/multisig.go : MultisigSig
  """
  multisig: TransactionSignatureMultisig

  """\[sig\] Standard ed25519 signature."""
  sig: String
}

"""
\[lsig\] Programatic transaction signature.

Definition:
data/transactions/logicsig.go
"""
type TransactionSignatureLogicsig {
  """\[arg\] Logic arguments, base64 encoded."""
  args: [String]

  """
  \[l\] Program signed by a signature or multi signature, or hashed to be the address of ana ccount. Base64 encoded TEAL program.
  """
  logic: String!

  """
  \[msig\] structure holding multiple subsignatures.
  
  Definition:
  crypto/multisig.go : MultisigSig
  """
  multisigSignature: TransactionSignatureMultisig

  """\[sig\] ed25519 signature."""
  signature: String
}

"""
\[msig\] structure holding multiple subsignatures.

Definition:
crypto/multisig.go : MultisigSig
"""
type TransactionSignatureMultisig {
  """\[subsig\] holds pairs of public key and signatures."""
  subsignature: [TransactionSignatureMultisigSubsignature]

  """\[thr\]"""
  threshold: Int

  """\[v\]"""
  version: Int
}

type TransactionSignatureMultisigSubsignature {
  """\[pk\]"""
  publicKey: String

  """\[s\]"""
  signature: String
}

enum TxType {
  PAY
  KEYREG
  ACFG
  AXFER
  AFRZ
  APPL
}

"""Fields relating to a protocol upgrade."""
type BlockUpgradeState {
  """\[proto\] The current protocol version."""
  currentProtocol: String!

  """\[nextproto\] The next proposed protocol version."""
  nextProtocol: String

  """\[nextyes\] Number of blocks which approved the protocol upgrade."""
  nextProtocolApprovals: Int

  """\[nextswitch\] Round on which the protocol upgrade will take effect."""
  nextProtocolSwitchOn: Int

  """
  \[nextbefore\] Deadline round for this protocol upgrade (No votes will be consider after this round).
  """
  nextProtocolVoteBefore: Int
}

"""Fields relating to voting for a protocol upgrade."""
type BlockUpgradeVote {
  """\[upgradeyes\] Indicates a yes vote for the current proposal."""
  upgradeApprove: Boolean

  """\[upgradedelay\] Indicates the time between acceptance and execution."""
  upgradeDelay: Int

  """\[upgradeprop\] Indicates a proposed upgrade."""
  upgradePropose: String
}

"""A health check response."""
type HealthCheck {
  data: JSON
  dbAvailable: Boolean!
  errors: [String]
  isMigrating: Boolean!
  message: String!
  round: Int!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type V2Account {
  """
  Account information at a given round.
  
  Definition:
  data/basics/userBalance.go : AccountData
  
  """
  account: Account!

  """Round at which the results were computed."""
  currentRound: Int!
}

"""
Account information at a given round.

Definition:
data/basics/userBalance.go : AccountData

"""
type Account {
  """the account public key"""
  address: String!

  """\[algo\] total number of MicroAlgos in the account"""
  amount: Int!

  """
  specifies the amount of MicroAlgos in the account, without the pending rewards.
  """
  amountWithoutPendingRewards: Int!

  """
  \[appl\] applications local data stored in this account.
  
  Note the raw object uses `map[int] -> AppLocalState` for this type.
  """
  appsLocalState: [ApplicationLocalState]

  """
  \[teap\] the sum of all extra application program pages for this account.
  """
  appsTotalExtraPages: Int

  """Specifies maximums on the number of each type that may be stored."""
  appsTotalSchema: ApplicationStateSchema

  """
  \[asset\] assets held by this account.
  
  Note the raw object uses `map[int] -> AssetHolding` for this type.
  """
  assets: [AssetHolding]

  """
  \[spend\] the address against which signing should be checked. If empty, the address of the current account is used. This field can be updated in any transaction by setting the RekeyTo field.
  """
  authAddr: String

  """Round during which this account was most recently closed."""
  closedAtRound: Int

  """
  \[appp\] parameters of applications created by this account including app global data.
  
  Note: the raw account uses `map[int] -> AppParams` for this type.
  """
  createdApps: [Application]

  """
  \[apar\] parameters of assets created by this account.
  
  Note: the raw account uses `map[int] -> Asset` for this type.
  """
  createdAssets: [Asset]

  """Round during which this account first appeared in a transaction."""
  createdAtRound: Int

  """Whether or not this account is currently closed."""
  deleted: Boolean

  """
  AccountParticipation describes the parameters used by this account in consensus protocol.
  """
  participation: AccountParticipation

  """amount of MicroAlgos of pending rewards in this account."""
  pendingRewards: Int!

  """
  \[ebase\] used as part of the rewards computation. Only applicable to accounts which are participating.
  """
  rewardBase: Int

  """
  \[ern\] total rewards of MicroAlgos the account has received, including pending rewards.
  """
  rewards: Int!

  """The round for which this information is relevant."""
  round: Int!

  """
  Indicates what type of signature is used by this account, must be one of:
  * sig
  * msig
  * lsig
  """
  sigType: SigType

  """
  \[onl\] delegation status of the account's MicroAlgos
  * Offline - indicates that the associated account is delegated.
  *  Online  - indicates that the associated account used as part of the delegation pool.
  *   NotParticipating - indicates that the associated account is neither a delegator nor a delegate.
  """
  status: String!
}

"""Stores local state associated with an application."""
type ApplicationLocalState {
  """Round when account closed out of the application."""
  closedOutAtRound: Int

  """
  Whether or not the application local state is currently deleted from its account.
  """
  deleted: Boolean

  """The application which this local state is for."""
  id: Int!

  """Represents a key-value store for use in an application."""
  keyValue: [TealKeyValue]

  """Round when the account opted into the application."""
  optedInAtRound: Int

  """Specifies maximums on the number of each type that may be stored."""
  schema: ApplicationStateSchema!
}

"""Represents a key-value pair in an application store."""
type TealKeyValue {
  key: String!

  """Represents a TEAL value."""
  value: TealValue!
}

"""Represents a TEAL value."""
type TealValue {
  """\[tb\] bytes value."""
  bytes: String!

  """\[tt\] value type."""
  type: Int!

  """\[ui\] uint value."""
  uint: Int!
}

"""Specifies maximums on the number of each type that may be stored."""
type ApplicationStateSchema {
  """\[nbs\] num of byte slices."""
  numByteSlice: Int!

  """\[nui\] num of uints."""
  numUint: Int!
}

"""
Describes an asset held by an account.

Definition:
data/basics/userBalance.go : AssetHolding
"""
type AssetHolding {
  """\[a\] number of units held."""
  amount: Int!

  """Asset ID of the holding."""
  assetId: Int!

  """
  Address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case.
  """
  creator: String!

  """
  Whether or not the asset holding is currently deleted from its account.
  """
  deleted: Boolean

  """\[f\] whether or not the holding is frozen."""
  isFrozen: Boolean!

  """Round during which the account opted into this asset holding."""
  optedInAtRound: Int

  """Round during which the account opted out of this asset holding."""
  optedOutAtRound: Int
}

"""Application index and its parameters"""
type Application {
  """Round when this application was created."""
  createdAtRound: Int

  """Whether or not this application is currently deleted."""
  deleted: Boolean

  """Round when this application was deleted."""
  deletedAtRound: Int

  """\[appidx\] application index."""
  id: Int!

  """Stores the global information associated with an application."""
  params: ApplicationParams!
}

"""Stores the global information associated with an application."""
type ApplicationParams {
  """\[approv\] approval program."""
  approvalProgram: String!

  """\[clearp\] approval program."""
  clearStateProgram: String!

  """
  The address that created this application. This is the address where the parameters and global state for this application can be found.
  """
  creator: String

  """\[epp\] the amount of extra program pages available to this app."""
  extraProgramPages: Int

  """Represents a key-value store for use in an application."""
  globalState: [TealKeyValue]

  """Specifies maximums on the number of each type that may be stored."""
  globalStateSchema: ApplicationStateSchema

  """Specifies maximums on the number of each type that may be stored."""
  localStateSchema: ApplicationStateSchema
}

"""Specifies both the unique identifier and the parameters for an asset"""
type Asset {
  """Round during which this asset was created."""
  createdAtRound: Int

  """Whether or not this asset is currently deleted."""
  deleted: Boolean

  """Round during which this asset was destroyed."""
  destroyedAtRound: Int

  """unique asset identifier"""
  index: Int!

  """
  AssetParams specifies the parameters for an asset.
  
  \[apar\] when part of an AssetConfig transaction.
  
  Definition:
  data/transactions/asset.go : AssetParams
  """
  params: AssetParams!
}

"""
AccountParticipation describes the parameters used by this account in consensus protocol.
"""
type AccountParticipation {
  """
  \[sel\] Selection public key (if any) currently registered for this round.
  """
  selectionParticipationKey: String!

  """\[voteFst\] First round for which this participation is valid."""
  voteFirstValid: Int!

  """\[voteKD\] Number of subkeys in each batch of participation keys."""
  voteKeyDilution: Int!

  """\[voteLst\] Last round for which this participation is valid."""
  voteLastValid: Int!

  """
  \[vote\] root participation public key (if any) currently registered for this round.
  """
  voteParticipationKey: String!
}

enum SigType {
  SIG
  MSIG
  LSIG
}

type V2AccountTransactions {
  """Round at which the results were computed."""
  currentRound: Int!

  """
  Used for pagination, when making another request provide this token with the next parameter.
  """
  nextToken: String
  transactions: [Transaction]!
}

enum SigType2 {
  SIG
  MSIG
  LSIG
}

enum TxType2 {
  PAY
  KEYREG
  ACFG
  AXFER
  AFRZ
  APPL
}

type V2Accounts {
  accounts: [Account]!

  """Round at which the results were computed."""
  currentRound: Int!

  """
  Used for pagination, when making another request provide this token with the next parameter.
  """
  nextToken: String
}

type V2Application {
  """Application index and its parameters"""
  application: Application

  """Round at which the results were computed."""
  currentRound: Int!
}

type V2Applications {
  applications: [Application]!

  """Round at which the results were computed."""
  currentRound: Int!

  """
  Used for pagination, when making another request provide this token with the next parameter.
  """
  nextToken: String
}

type V2Asset {
  """Specifies both the unique identifier and the parameters for an asset"""
  asset: Asset!

  """Round at which the results were computed."""
  currentRound: Int!
}

type V2AssetBalances {
  balances: [MiniAssetHolding]!

  """Round at which the results were computed."""
  currentRound: Int!

  """
  Used for pagination, when making another request provide this token with the next parameter.
  """
  nextToken: String
}

"""A simplified version of AssetHolding """
type MiniAssetHolding {
  address: String!
  amount: Int!

  """
  Whether or not this asset holding is currently deleted from its account.
  """
  deleted: Boolean
  isFrozen: Boolean!

  """Round during which the account opted into the asset."""
  optedInAtRound: Int

  """Round during which the account opted out of the asset."""
  optedOutAtRound: Int
}

type V2AssetTransactions {
  """Round at which the results were computed."""
  currentRound: Int!

  """
  Used for pagination, when making another request provide this token with the next parameter.
  """
  nextToken: String
  transactions: [Transaction]!
}

enum AddressRole {
  SENDER
  RECEIVER
  FREEZE_TARGET
}

type V2Assets {
  assets: [Asset]!

  """Round at which the results were computed."""
  currentRound: Int!

  """
  Used for pagination, when making another request provide this token with the next parameter.
  """
  nextToken: String
}

type V2Transaction {
  """Round at which the results were computed."""
  currentRound: Int!

  """
  Contains all fields common to all transactions and serves as an envelope to all transactions type.
  
  Definition:
  data/transactions/signedtxn.go : SignedTxn
  data/transactions/transaction.go : Transaction
  
  """
  transaction: Transaction!
}

type V2Transactions {
  """Round at which the results were computed."""
  currentRound: Int!

  """
  Used for pagination, when making another request provide this token with the next parameter.
  """
  nextToken: String
  transactions: [Transaction]!
}
